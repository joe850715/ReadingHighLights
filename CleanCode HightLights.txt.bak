---HIGHLIGHTS FOR CLEAN CODE---

CHAPTER01.無瑕的程式碼

1.足夠專注：
	每個方法、類別、模組都應該要盡可能使目的變得單一且明確，
	一段Code應俐落地闡述一個清楚的概念，提高可讀性
	
2.可被原開發者以外的人員閱讀與增強，且應使包含單元測試與驗收測試。

3.使用有意義的名稱(良好的命名習慣)

4.一項任務僅透過一種途徑達成(避免重複)

5.提供清楚且盡可能少的API，並盡可能減少相依性

6.具有最少數量的實體(Entity)，包含類別、方法、函式、或其他類似的實體

---
CONCLUSION:
	減少重複、具有高度表達力、及早建立簡單抽象概念
	
---	

CHAPTER02.有意義的命名

1.良好的命名應該要能夠明確的"展現意圖"

2.何謂展現意圖：
	展現意圖是讓讀者能夠在閱讀時立即明白一段Code的"目的與作用"，
	問題通常不是出在Code不夠簡潔，而是在於Code的"隱含性"
	-->即是Code的上下文資訊無法被程式明確展現出來的程度。
	
3.避免使用與原意相違背的詞，造成誤導 Ex.變數名稱取名為accountList但其型態並非List

4.避免使用過於相似(僅有細微不同)的名稱，導致判斷時間增加、閱讀效率降低

5.假使名稱必須有所不同，他們也應代表不同的意義，避免為了滿足Compiler的限制而無意義的命名

6.使用單一字母的命名和數值無法容易地在一篇文字中搜尋到，儘可能使用可以被搜尋的名字

7.通常也只有在宣告小的函式內的區域變數時才會使用單一字母

8.類別命名應使用名詞進行命名；方法應使用動詞或是動詞片語

9.當建構子被overloaded的時候，請使用名稱中含有參數資訊的靜態工廠方法 Ex.
	Complex fulcrumPoint = Complex.FromRealNumber(23.0);
	上述的作法比下方的作法恰當些，使讀者擁有更多資訊
	Complex fulcrumPoint = new Complex(23.0);

10.相同的概念儘量使用同一單字進行代表 Ex.driver/Controller/Manager三者概念上雷同擇一即可

11.盡量選用解決方案領域或是問題領域的命名(確保擁有共通的知識與文化背景)

---

CHAPTER03.函式

1.首要準則：簡短！

2.每個函式以簡短為前提，也必須有強大的意圖(明確的目的)，從一個函式帶領讀者至下個函式

3.一個函式應該只做一件事情，一層層引導往其他下面一層的函式，逐步闡明最初的函式要做的事情

4.函式的參數數量越少越好，盡可能不要超過三個(除非有特殊的理由)
	零參數函式(niladic)
	單參數函式(monadic)
	雙參數函式(dyadic)
	三參數函式(triadic)
	多參數函式(polyadic)
	
5.參數盡量少的原因之一：
	從測試的角度來看，使用參數是一件困難的事情。因為要寫出一個案例
	在各種參數可能的組合下都能work。

6.旗標(flag)參數
	將boolean作為參數傳給函式會使方法的署名(定義方法的第一行)變得複雜，
	同時也等同於宣告了此函式做了超過一件的事情(true / false 各一件)
	因此應盡量避免

7.物件型態的參數
	當一個函式需要超過兩個或三個參數時，很可能需要將其中的一兩個參數包在一個類別裡
	
8.	