-------JAVASCRIPT HIGHLIGHTS-------
CHAPTER01.概述

01.JavaScript是由瀏覽器去執行的程式語言，瀏覽器還會位HTML頁面建立可供JS使用的物件模型(ObjectModel)

02.如何將JS加入頁面?
	(1)把<script>放到<head>元素中 
	(2)把<script>放到<body>元素中
	(3)把js獨立到.js中，透過<head>中的<script>做連結，指向JavaScript檔案
	(4)在頁面本文底部引用外部.js檔案(可以在本文載入結束後才運作 jQuery則可以使用$(document).ready(function...))
	
-----------------------------------------------------------------------
CHAPTER02.更進一步

01.JavaScript的比較運算
	JS中有兩種比較運算子"=="以及"==="
	不同之處在於==只在意回傳值是否相等，===則是除了回傳值外其資料型別也要相等
	以下提供一些用例：
	(1)如果比較值可能是 true 或 false 值，請使用 === 而不是 ==。
	(2)如果比較值可能是這些特定值中的任何一個（0、"" 或 [] – 空陣列），請使用 === 而不是 ==
	(3)在任何其他情況下，你都可以安全地使用 ==。它不僅安全，而且還簡化了程式碼並提高了可讀性。
	(4)在判斷是否為NaN時可以使用isNaN(傳入值)函式

-----------------------------------------------------------------------
CHAPTER03.函式

01.參數與引數的探討
	(1)引數不足時，沒對應到的參數為"undefined"
	(2)引數過多時，多餘的引數會被JS忽略
	(3)參數視需求而設置就好，也有很多函式是無參數的

02.可以使用return回傳函式執行的結果

03.變數的作用域(Scope)
	宣告在函式外作為全域變數，宣告在函式內做為區域變數
	其中若是在一個"區塊"以內的話(僅有{}包裹且並非函式內容的區塊)
	(1)var宣告:可以跨區域
	(2)let宣告:限於該區域內
	若是宣告在函式內，則兩者都會是區域變數，變數的作用域影響了變數的生命週期
	
04.當使用了一個沒有宣告過的變數，JS會幫我們進行宣告，此時必定會是"全域變數"！

05.當宣告區域變數時使用了跟全域變數一樣的變數名稱，則限於在該區域內我們只能呼叫到區域變數，不會互相影響

06.全域變數的存活期限跟頁面的存在期限一樣，換句話說在頁面重新整理之後全域變數也會重置

07.js的運作：
	雖然javaScript會從頂部執行到底，但實際上JavaScript會讀取頁面兩次，
	第一次讀取所有的函式定義，第二次開始才著手執行程式碼，所以函式可以放在任何地方
	
08.一些方便自己維護JS的共識：
	(1)全域變數放在頂部
	(2)函式們盡量放在一起，在相同區域
	(3)區域變數宣告在函式頂部(本體內容開頭處)
	
09.當函式執行完return後就會停止執行，return以後的程式碼會被忽略

-----------------------------------------------------------------------
CHAPTER04.陣列

01.可以使用array.length獲得陣列的大小

02.建立空陣列後可以在事後加入資料項，使用arr.push(value)的函式把value加入陣列尾端

03.JavaScript並未要求放入陣列的元素都要式同一型別，但如果這樣做使用時要格外小心

04.如果使用太大或是太小的索引值來存取陣列，都會得到undefined的結果

05.可以使用arr.length取得陣列size作為索引值，找到最後一個元素

06.稀疏陣列:指只有少數索引值有值其他沒有的情況，例如arr[0]=A ,arr[100]=B;只有兩個索引值有值但陣列長度為101

-----------------------------------------------------------------------
CHAPTER05.物件	

01.建立物件
	使用{};包覆，一個屬性使用一組 屬性名:屬性值 構成，屬性間由逗號分隔，範例:
	var object={
		a1:1,
		a2:"AAA",
		a3:false
	};
	也可以建立空物件例如:var emptyObj={};
	後續通過動態的方式做新增
	
02.物件屬性的添加&刪除
	使用點號進行存取，以上面物件object為例:
	object.a1可以取得屬性a1的值，也可以進行賦值做修改
	當存取的屬性不存在物件中時，它可以被直接加入物件，例如:
	object.a4="666"; --> 會直接將666字串賦值給a4屬性並建立之
	存取不存在的屬性時，求職結果會是undefined
	
	當要刪除屬性時只要呼叫delete函式如下操作即可:
	delete object.a4; 如此就會刪去物件的a4屬性了
	在被刪除後呼叫a4會傳回undefined
	當屬性被刪除時delete函式會回傳true,失敗回傳false,即使刪除一個不存在的屬性也會回傳true
	
03.變數如何保存一個物件
	變數保存的"實際上不是一個物件"而是物件的址參器reference，
	他就像是址項實際物件的指標(pointer)或是位址(address)，因此變數中保存的東西會指向物件的位址
	使用點號時JS解譯器會根據址參器獲取物件並存取屬性
	<P.S>
		基本變數代表的是變數的實際值，物件變數代表的則是取得物件的方式
		我們也可以把物件的址參器視為另一個變數值，像基本值那樣
		
04.如何將物件傳遞給函式
	比較：
		(1)將引數傳給函式:使用按值傳遞(pass-by-value)也就是所謂按副本傳遞(pass-by-copy)
		(2)將物件傳給函式:基本與引數按值傳遞相同，當叫用函式並傳入物件時，傳入的其實是址參器
			-->也就是說址參器也是傳入他的副本到函式中進行使用，指向的是原本相同的物件，
			如果在函式中改變了物件的屬性值，因為是相同的物件所以也會改變物件的屬性值
			
05.物件中的函式
	我們也可以把函式直接加入一個物件，只要把函式定義賦值給一個屬性即可，
	這個函式的名稱就是屬性名，存取該屬性時就會執行該函式，範例:
		var car={
			make:"TOYOTA",
			model:"500",
			year:1996,
			drive:function(){
				alert("OK,let's go.");
			}
		};
	
	<P.S>
		在調用函式時，如果有需要把物件的屬性當引數傳遞進函式中，務必要注意函示是否get得到這個屬性(變數的Scope)，
		例如在物件中使用其屬性記得要在屬性前加上this.屬性名來做使用

06.this的使用
	可以把this想像成一個變數，而且該變數被分配給了剛才被我們叫用了方法的物件
	
07.方法與函式的區別
	方法其實就是一個函式，不過她被分配給了物件中的一個屬性名稱，我們可以使用函式名稱來叫用函式，
	但是卻必須使用點號+屬性名稱來呼叫"方法"，也就是說方法之所以叫做方法是因為它位於物件之內
	在物件中新增方法的方式與新增屬性的方式相同

08.查看物件中的所有屬性
	透過使用for in 迭代器，此迭代器會使用任意順序逐一取得一個物件包含的所有屬性，範例；
	for(var prop in car){
		console.log(prop+":"+chevy[prop]);
	}
	for in 會逐個取得每個物件的屬性，並依序把每個屬性賦值給prop變數

-----------------------------------------------------------------------
CHAPTER06.認識DOM

01.DOM名為文件物件模型(Document Object Model)

02.JS與HTML如何互動?
	(1)
		將我們頁面載入瀏覽器後，瀏覽器會解析HTML並建立"一組"DOM物件用來代表我們HTML頁面的標記，
		將物件紀錄的每個標記展現在節點上並存入DOM，之後渲染出整個頁面
	(2)
		JS可以跟DOM物件互動以便存取元素以及元素中的內容，也可以使用DOM進行元素的建立與移除
	(3)
		當JS修改DOM瀏覽器會動態更新頁面，因此可以看到新的內容
	(4)
		document即是所有html頁面的頂層物件，html則是他的子節點
	
	其中，JS可以透過document.getElementByXXX()以特定條件與方法取得頁面中的某個節點的值	
	
03.注意事項
	(1)當使用getElementById叫用一個不存在的id時，會回傳一個null值
	(2)另外可以使用getElementByClassName或是getElementByTagName都可以取得對應元素(有可能是"一組"元素)
	(3)innerHTML代表了取得的元素中的所有內容，outerHTML則是除了內容之外也包含取得的元素本身
	
04.當在處理DOM的時候務必等到頁面完全載入後再執行Code,否則會發生DOM都還沒好(尚且不存在)就想要取用的窘況

05.瀏覽器的JS代表物件為window，可用window.onload=函式名稱來呼叫完成載入後執行的函式(不用在名稱後加上括號)

06.可以使用setAttribute("屬性名","屬性值")對選擇的元素進行屬性設置或修改

07.可以使用getAttribute("屬性名")取得對應屬性值，當取得的屬性不存在時獲得null

-----------------------------------------------------------------------
CHAPTER07.資料型別與轉換

01.
	undefined的型別就是undefined,任何未定義值的值都會是他；
	null 的型別則是object

02.可以利用typeof去檢查變數的資料型別,
	EX.
		var subject = "YES";
		var test = typeof subject;

03.注意如果使用getElementById()所指定的Id不存在，則回傳值為null而非undefined，兩者區別：
	undefined	:變數尚未被初始化、物件缺少屬性或陣列缺少值的情況
	null		:應該要有物件但卻無法建立或找到的情況(物件"尚不存在"的情況)

04.當JS要表達一個數值並非數字時會使用NaN表示"Not A Number"，同時NaN的特別之處在於它與自己並不相等(NaN!=NaN)
	所以如果要在if條件中驗證是否為NaN需要叫用isNaN(待測變數)進行驗證
	並且！NaN的型別是"number"！NaN的型別是"number"！NaN的型別是"number"！
	
05.NaN與Infinity的區別
	在進行0/0時會得到NaN，但是10/0時卻會得到Infinity，
	原因是因為Infinity代表超過電腦浮點數上限1.7976931348623157E+10308，
	所有大過這個數字的所有數字都是Infinity，另外一提，Infinity的資料型別是number
	<P.S>
		Infinity - Infinity = NaN
		
06.等號比較
	JS中數值字串做比較時是可以比較的，使用==運算子
	JS會嘗試把兩者轉成相同的型別再做比較，除非我們用===進行嚴格相等的比較，才會把型別納入比較
	
07.等於運算子如何轉換他的運算元?
	(1)數字VS字串:
		嘗試把字串轉成數字，若失敗則傳回NaN
	(2)布林VS任何其他型別:
		true->1 ; false->0
		數值以外的型別再轉換(因此可能進行多次轉換)
	(3)比較null與undefined
		這兩個值雖然type不一樣但同樣代表"沒有值"
		因此兩者總是相等
	(4)空字串轉數值會轉成0	
	(5)兩個字串比較大於小於時會轉成編碼然後郵遞一個字元開始逐個往下比，比到第一個分出勝負的字元時得到結果並停止
		(電腦會使用Unicode編碼去比較)

08.當有其中一個運算元是字串時，"+"號總是會被解讀為字串串聯，boolean與字串的連結也會變成字串 EX.
	true+"love" -> true love

09.何謂"物件相等"
	測試兩個物件是否相等時，比較的是兩物件的址參器(與物件的內容無關)
	只有在址參器指向相同物件時會相等
	
10.truthy與falsey值
	Tips:判斷是不是falsey值，如果不是那就必定是truthy值
	falsey值有哪些:
		(1)undefined
		(2)null
		(3)0
		(4)空字串
		(5)NaN
		
11.資料型別可以分為兩種：基本資料型別 / 物件
	在JS中我們如果對字串使用方法，JS會暫時將此字串作為一個字串物件
	(JS會幫我們來回轉換)
	
12.一些常用的對字串分析的方法
	(1)charAt()用於取得字串中位於特定索引的字符
	(2)indexOf()取得一個字串引數並回傳該引述在字串中首次出現第一個字母的索引值，也可以指定由第幾個索引開始查找
	(3)split()用指定的分割符號將字串分割並以陣列回傳
	另外還有:toLower/UpperCase,slice,lastIndexOf,replace,match,concat,substring,trim,.....很多	